use ggez::{Context, GameResult};
use ggez::error::GameError;
use ggez::graphics;
use ggez::nalgebra as na;

use std::ops::Index;

use crate::assets::Texture;
use crate::collider::ColliderEdge;
use crate::block::Block;

pub struct TileMap {
    width : usize,
    height: usize,
    grid  : Vec<Block>,
    spritebatch: graphics::spritebatch::SpriteBatch,
}

impl TileMap {
    pub fn new(width: usize, height: usize, grid: Vec<Block>, spritebatch: graphics::spritebatch::SpriteBatch) -> GameResult<TileMap> {
        if grid.len() != height * width {
            return Err(GameError::ResourceLoadError(String::from("TileMap has wrong dimensions")));
        }

        Ok(TileMap {
            width : width,
            height: height,
            grid  : grid,
            spritebatch: spritebatch,
        })
    }

    pub fn blocks(&self) -> impl Iterator<Item = ((usize,usize), &Block)> {
        self.grid
            .iter()
            .as_slice()
            .chunks(self.width)
            .enumerate()
            .flat_map(|(y_idx, row)| row.iter().enumerate().map(move |(x_idx, block)| ((x_idx, y_idx), block)))
    }

    pub fn textures(&self) -> impl Iterator<Item = ((usize,usize), &Texture)> {
        self.blocks().map(move |((x,y),block)| ((x,y), &block.texture))
    }

    pub fn colliders(&self) -> impl Iterator<Item = ((usize,usize), &ColliderEdge)> {
        self.blocks().map(move |((x,y),block)| ((x,y), &block.collider))
    }

    //Pass width and height because SpriteBatch doesn't have a getter for image
    pub fn draw(&mut self, ctx: &mut Context, camera: graphics::DrawParam) -> GameResult<()> {
        
        for y in 0..self.height  {
            for x in 0..self.width  {
                let p = graphics::DrawParam{
                    dest:  [x as f32,y as f32].into(),
                    scale: [1.0 / 171.0, //??? why no getter for image?!! Cant get dimensions
                            1.0 / 167.0 ].into(), //???
                    ..
                    Default::default()
                };

                match self.index((x,y)).texture {
                    Texture::Ground => {self.spritebatch.add(p);},
                    _ => {},
                };
            }    
        }   

        graphics::draw(ctx, &self.spritebatch, camera)?;
            self.spritebatch.clear();
        Ok(())
    }

    pub fn load_test(spritebatch: graphics::spritebatch::SpriteBatch) -> TileMap {

        let vec = vec![
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},Block { texture: Texture::Air,  collider: ColliderEdge::none()},
            Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},Block { texture: Texture::Ground,  collider: ColliderEdge::all()},
        ];   

        TileMap::new(32, 9, vec, spritebatch).unwrap()
    } 
}

impl Index<(usize,usize)> for TileMap {
    type Output = Block;
    fn index(&self, (x,y): (usize, usize)) -> &Block {
        &self.grid[(y * self.width) + x ]
    }
}